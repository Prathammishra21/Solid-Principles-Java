The Dependency Inversion Principle (DIP) in Java suggests that high-level modules should not depend on low-level
modules. Instead, both should depend on abstractions.
Abstractions should not depend on details; rather, details should
depend on abstractions.
This principle promotes loose coupling between modules, making the system more flexible and
easier to maintain.
In Java, DIP is implemented through the use of interfaces or abstract classes to define abstractions,
allowing concrete implementations to be swapped without affecting the overall system.